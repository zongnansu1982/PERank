/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package bike.snu.ac.kr.struts.action;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map.Entry;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.lucene.queryParser.ParseException;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import query.ContentSearcher;
import query.WeightedrankFingerPrintSearcher;
import tool.pagesSpliter;
import bean.SearchBean;
import bike.snu.ac.kr.struts.form.AnonymousSearchForm;
import bike.snu.ac.kr.struts.form.FootPageForm;

/** 
 * MyEclipse Struts
 * Creation date: 07-09-2012
 * 
 * XDoclet definition:
 * @struts.action path="/footPage" name="footPageForm" input="/searchFooter.jsp" parameter="pageNum" scope="request" validate="true"
 * @struts.action-forward name="sucess" path="/anonymousSearch.jsp"
 */
public class FootPageAction extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws ParseException 
	 * @throws IOException 
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws IOException, ParseException {
		FootPageForm footPageForm = (FootPageForm) form;// TODO Auto-generated method stub
		System.out.println(footPageForm.getPageNum());
		System.out.println(footPageForm.getQuery());
		
		// Auto-generated
		// method
		// stub
		ActionForward actionForward = null;
		String query = footPageForm.getQuery().toLowerCase();
		String[] topics = footPageForm.getTopic().split(" ");
		String[] links = footPageForm.getLink().split(" ");
		int currentPage=footPageForm.getPageNum();
		if(currentPage==0){
			currentPage=1;
		}
		WeightedrankFingerPrintSearcher searcher = new WeightedrankFingerPrintSearcher(
				"E://PPV/SmallData/index/weightedFingerPrint_1000");
		ArrayList<String> preferenceslist = new ArrayList<String>();
		preferenceslist.add("pdrhealthlink");
		preferenceslist.add("brandedDrug");

		HashMap<String, Double> preferencesmap = new HashMap<String, Double>();
		// preferencesmap.put("enzymes",0.6);
		// preferencesmap.put("interactionDrug", 0.2);

		preferencesmap.put("drugs", 0.8);
		// preferencesmap.put("references", 0.2);
		preferencesmap.put("targets", 0.2);

		// searcher.singlePreferenceWithWeightSearch("DB01020_DB00353",
		// preferencesmap);
		// searcher.singlePreferenceWithWeightSearch("synonym", preferences);
		int totalHits=searcher.returnMergePreferenceWithWeightSearchTotalNumber("db01295", preferencesmap);
		System.out.println("total hits: "+totalHits);
		int pageSize = 10;  
		int lowLimit=(currentPage-1)*pageSize;
	    int upperLimit=currentPage*pageSize-1;
	    HashMap<String,SearchBean> searchResults;
	    if(upperLimit<totalHits){
	    	searchResults =searcher.mergePreferenceWithWeightSearch("db01295", preferencesmap, lowLimit,upperLimit);
	    }else{
	    	searchResults =searcher.mergePreferenceWithWeightSearch("db01295", preferencesmap, lowLimit,totalHits);	
	    }
		
		HashMap<String,String> results = new HashMap<String, String>();
		HashMap<String,String> result;
		for(Entry<String, SearchBean> entry:searchResults.entrySet()){
			ContentSearcher content= new ContentSearcher();
			result=content.search(entry.getKey(),"db01295");
//			result=content.testhighlighter(entry.getKey());
			for(Entry<String,String> entry1:result.entrySet()){
				results.put(entry1.getKey(), entry1.getValue());
			}
			
		}
		
	    int totalPages = totalHits/pageSize + ((totalHits%pageSize)>0?1:0);  
		
		for(Entry<String,String> entry:results.entrySet()){
			System.err.println(entry.getKey());
			System.err.println(entry.getValue());
		}
		
		String[] topics0= new String[1];
		topics0[0]="t2";
		String[] links0= new String[2];
		links0[0]="l2";
		links0[1]="l1";
		request.setAttribute("totalHits", totalHits);
		request.setAttribute("currentPage", currentPage);
		request.setAttribute("maxPage", totalPages);
		System.out.println(pagesSpliter.pagesSplit(currentPage, 5, totalPages).length);
		request.setAttribute("pages", pagesSpliter.pagesSplit(currentPage, 5, totalPages));
		request.setAttribute("oldtopcis", topics0);
		request.setAttribute("oldlinks", links0);
		request.setAttribute("oldquery", query);
		request.setAttribute("feedback", results);
		request.setAttribute("outwithPreference", searchResults);
		actionForward = mapping.findForward("sucess");

		return actionForward;
	}
}